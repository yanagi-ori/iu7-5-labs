#x - x для удобства перебора в цикле
#xn - x начальный, xk - x конечный, hx - шаг, ymin, ymax - мин. и макс. y
#s - пробел, z- кол-во пробелов(позиция точки)
#q - позиция оси координат



from math import exp 
#ввод значений
xn, xk, hx = map(float,input("Введите через пробел \
x начальный, x конечный, шаг ").split())
x = xn
y = x**6 - 2 * x**5 + 1.7 * x**4 - 4.7 * x**3 - 0.8 * x**2 + 4.26 * x - 2
ymin = y 
ymax = y
s = ' '

# Таблица

print('_'*24)
print('|   x    |      y      |')

# Вычисление функции, её минимума и максимума в точках х, и вывов в таблицу
while x < xk + hx / 2:
    y = x**6 - 2 * x**5 + 1.7 * x**4 - 4.7 * x**3 - 0.8 * x**2 + 4.26 * x - 2
    if 0 <= x < exp(-14):
        x = 0
    ymin = min(y, ymin)
    ymax = max(y, ymax)
    print('|{:7.6g} | {:12.5g}|'.format(x, y))
    x += hx

print('-'*24)

# График

x = xn
# Вычисление точки оси 
q = int((0 - ymin) / (ymax - ymin) * 70)
round(q)
# Вывод минимума и максимума функции
print(('{:12.5g}' + s * 55 + '{:12.5g}').format(ymin, ymax))

# Ось у
print('-'*79 + '>')

# Расставление точек
while x < xk + hx / 2:   
    y = x**6 - 2 * x**5 + 1.7 * x**4 - 4.7 * x**3 - 0.8 * x**2 + 4.26 * x - 2
    z = int((y - ymin) / (ymax - ymin) * 70)   # Позиция точки
    round(z)

   # Расстановка точки до оси (отрицательные х)
    if q != z and q > z:
        if 0 <= x < exp(-14):
            x = 0
        print('{:7.6g}|'. format(x), s * z + '*' + s * (q - z - 1) + '|')

   # Расстановка точки после оси (положительные х)
    elif q != z and q < z:
        if 0 <= x < exp(-14):
            x = 0
        print('{:7.6g}|'. format(x), s * q + '|' + s * (z - q - 1) + '*')

   #  Расстановка точки, попавшей на ось
    else:
        if 0 <= x < exp(-14):
            x = 0
        print('{:7.6g}|'. format(x), s * z + '*')
    x += hx
print(s * (q+8), 'v')
    



    
